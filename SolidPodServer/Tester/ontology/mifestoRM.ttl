## the relevant prefixes
@prefix mifestoRM: <http://localhost:5000/Tester/ontology/mifestoRM#>.
## this prefix points towards this document and should be altered if the ontology would be published

@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix dcat: <http://www.w3.org/ns/dcat>.
@prefix dct: <http://purl.org/dc/terms/>.
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix foaf: <http://xmlns.com/foaf/0.1/>.
@prefix pav: <http://purl.org/pav/>.
@prefix doap: <http://usefulinc.com/ns/doap#>.
@prefix fno: <https://w3id.org/function/ontology#>.


## some metadata about this document
mifestoRM: a owl:Ontology;
    dcterms:title "MIcro FrontEnd Store Ontology";
    dcterms:description """
    *This is a draft document and ontology*
    The "MIcro FrontEnd Store Ontology" as revised by Robbe Michiels; originally described by Jeroen Werbrouck et al. (2022).
    The ontology is aimed at describing micro frontend applications which handle rdf structured data.
    The goal is to create collections of these applications in such a manner they can be searched and displayed in some sort of "app store".
    """@en.


## the classes for the store
mifestoRM:Store rdfs:subClassOf dcat:Catalog,
    rdfs:label "Store";
    rdfs:comment "The store is a container resource (dcat:Catalog) that references either mifesto Manifests or other Catalogs.".

## the store properties
## *use normal dcat properties, they already provide an intricate description for datasets and catalogs*


# the class for the manifest
mifestoRM:Manifest rdf:type rdfs:Class;
    rdfs:label "Manifest";
    rdfs:comment "A self-describing document regarding the necessary metadata to incorparate a module through a mifesto Store. It provides information on the inner-workings of modules and human readable descriptions in order to discover the module.".

## the manifest properties
mifestoRM:moduleName rdfs:subPropertyOf rdfs:label;
    rdfs:label "moduleName";
    rdfs:comment "Provides a human readable name of the module, intended to be displayed in the Store.";
    rdfs:domain mifestoRM:Manifest.

mifestoRM:moduleDescription rdfs:subPropertyOf rdfs:comment;
    rdfs:label "moduleDescription";
    rdfs:comment "Provides a human readable description of the module, intended to describe the module's functionality in the Store.";
    rdfs:domain mifestoRM:Manifest.

mifestoRM:hasDepiction rdfs:subPropertyOf foaf:depiction;
    rdfs:label "hasDepiction";
    rdfs:comment "Provides an image related to the module to be displayed in the store. This could be a logo or an image from a part of the module. It is the intention that this points towards a URL of the image. This property is defined as foaf:depiction.";
    rdfs:domain mifestoRM:Manifest.

mifestoRM:hasFunctionModule rdf:type rdf:Property;
    rdfs:label "hasFunctionModule";
    rdfs:comment "Describes that the manifest has a functionality module.";
    rdfs:domain mifestoRM:Manifest;
    rdfs:range mifestoRM:FunctionModule.

mifestoRM:hasViewerModule rdf:type rdf:Property;
    rdfs:label "hasViewerModule";
    rdfs:comment "Describes that the manifest has a visualisation module.";
    rdfs:domain mifestoRM:Manifest;
    rdfs:range mifestoRM:ViewerModule.


## the classes for either the functionality or visualisation modules
mifestoRM:FunctionModule rdf:type rdfs:Class;
    rdfs:label "FunctionModule";
    rdfs:comment "This Class describes a functionality module attached to the Manifest, e.g. a module containing primarily buttons with functions attached to them.".

mifestoRM:ViewerModule rdf:type rdfs:Class;
    rdfs:label "ViewerModule";
    rdfs:comment "This Class describes a visualisation module attached to the Manifest. This is meant for any module which visualises the (partial) graph or its items, e.g. a renderer which displays all geometry attached to items in a certain dataset.".

## the properties of the functionality or visualisation modules
mifestoRM:hasVersion rdfs:subPropertyOf pav:hasVersion;
    rdfs:label "hasVersion";
    rdfs:comment "Describes that the module has a pubic release or version and thus points to a mifesto Release object. This property has been defined as pav:hasVersion, with a range of mifesto Release.";
    rdfs:domain mifestoRM:FunctionModule, mifestoRM:ViewerModule;
    rdfs:range mifestoRM:Release.


## The class for the release of a module
mifestoRM:Release rdf:type rdfs:Class;
    rdfs:label "Release";
    rdfs:comment "This Class describes a public release or version of the module.".

## the Release properties
mifestoRM:versionNumber rdfs:subPropertyOf doap:revision;
    rdfs:label "versionNumber";
    rdfs:comment "Holds a literal describing the structured version number or label.".

mifestoRM:hasModule rdf:type rdf:Property;
    rdfs:label "hasModule";
    rdfs:comment "Describes that the Release has an actual Module which can be implemented.";
    rdfs:domain mifestoRM:Release;
    rdfs:range mifestoRM:Module.

mifestoRM:consumesInput rdf:type rdf:Property;
    rdfs:label "consumesInput";
    rdfs:comment "Describes that the released module needs a parameter it uses as input.";
    rdfs:range fno:Parameter.
    
mifestoRM:expectedOutput rdf:type rdf:Property;
    rdfs:label "expectedOutput";
    rdfs:comment "Describes that the released module will generate an output.";
    rdfs:range fno:Output.

mifestoRM:outputDescription rdfs:subPropertyOf rdf:comment;
    rdfs:label "outputDescription";
    rdfs:comment "Provides a human readable description of the output the module will generate. It is intended that this is a technical description of the alterations or additions the module will make to the provided graph.";
    rdfs:domain fno:Parameter.

mifestoRM:hasModule rdf:type rdf:Property;
    rdfs:label "hasModule";
    rdfs:comment "Describes that the Release has a Module with the injectable code.";
    rdfs:domain mifestoRM:Release;
    rdfs:range mifestoRM:Module.


## the class for the Module with the injectable code
mifestoRM:Module rdf:type rdfs:Class;
    rdfs:label "Module";
    rdfs:comment "This Class describes the actual module and the injectable code attached to the corresponding release and the manifest.".

## the module properties
mifestoRM:isExposedOn rdf:type rdfs:Property;
    rdfs:label "isExposedOn";
    rdfs:comment "Provides the URL where the injectable code of the module is exposed. In the current iteration, the isExposedOn property only allows literal values.";
    rdfs:domain mifestoRM:Module, mifestoRM:Release, mifestoRM:FunctionModule, mifestoRM:ViewerModule;
    rdfs:range rdfs:Literal.


## the origin meta-data classes
mifestoRM:Origin rdf:type rdfs:Class;
    rdfs:label "Origin";
    rdfs:comment "This class describes the origin of a resource.".

## the meta-data properties
mifestoRM:hasOrigin rdf:type rdf:Property;
    rdfs:label "hasOrigin";
    rdfs:comment "Describes that a resource originates from a certain micro front-end or application.";
    rdfs:range mifestoRM:Origin.

mifestoRM:originatesFrom rdf:type rdf:Property;
    rdfs:label "originatesFrom";
    rdfs:comment "Describes which micro front-end or application generated the resource, by referencing its Manifest.";
    rdfs:domain mifestoRM:Origin;
    rdfs:range mifestoRM:Manifest.

mifestoRM:addedBy rdf:type rdf:Property;
    rdfs:label "addedBy";
    rdfs:comment "Provides the person by whom the resource was added to the graph, by refering to their personal document.";
    rdfs:range foaf:Person.

mifestoRM:addedOn rdfs:subPropertyOf dcterms:dateSubmitted;
    rdfs:label "addedOn";
    rdfs:comment "Provides when the resource was added to the graph.".